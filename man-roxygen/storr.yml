destroy:
  short: >-
    Totally destroys the storr by telling the driver to destroy all
    the data and then deleting the driver.  This will remove all data
    and cannot be undone.

flush_cache:
  short: >-
    Flush the temporary cache of objects that accumulates as the storr
    is used.  Should not need to be called often.

set:
  short: >-
    Set a key to a value.
  params:
    key: The key name.  Can be any string.
    namespace: >-
      An optional namespace.  By default the default namespace that
      the storr was created with will be used (by default that is
      "objects").  Different namespaces allow different types of
      objects to be stored without risk of names colliding.  Use of
      namespaces is optional, but if used they must be a string.
    value: >-
      Any R object to store.  The object will generally be serialized
      (this is not actually true for the environment storr) so only
      objects that would usually be expected to survive a
      `saveRDS`/`readRDS` roundtrip will work.  This
      excludes Rcpp modules objects, external pointers, etc.  But any
      "normal" R object will work fine.
    use_cache: &use_cache >-
      Use the internal cache to avoid reading or writing to the
      underlying storage if the data has already been seen (i.e., we
      have seen the hash of the object before).
  value: >-
    Invisibly, the hash of the saved object.

set_by_value:
  short: >-
    Like `set` but saves the object with a key that is the same
    as the hash of the object.  Equivalent to
    `$set(digest::digest(value), value)`.
  params:
    value: An R object to save, with the same limitations as `set`.
    namespace: Optional namespace to save the key into.
    use_cache: *use_cache

get:
  short: >-
    Retrieve an object from the storr.  If the requested value is not
    found then a `KeyError` will be raised (an R error, but can be
    caught with `tryCatch`; see the "storr" vignette).
  params:
    key: &key_get The name of the key to get.
    namespace: &ns_get Optional namespace to look for the key within.
    use_cache: *use_cache
get_hash:
  short: >-
    Retrieve the hash of an object stored in the storr (rather than
    the object itself).
  params:
    key: *key_get
    namespace: *ns_get
del:
  short: Delete an object from the storr.
  params:
    key: &key_vector A vector of names of keys
    namespace: &ns The namespace of the key.
  value: >-
    A logical vector the same length as the recycled length of
    key/namespace, with each element being `TRUE` if an object
    was deleted, `FALSE` otherwise.

duplicate:
  short: >-
    Duplicate the value of a set of keys into a second set of keys.
    Because the value stored against a key is just the hash of its
    content, this operation is very efficient - it does not make a
    copy of the data, just the pointer to the data (for more details
    see the storr vignette which explains the storage model in more
    detail).  Multiple keys (and/or namespaces) can be provided, with
    keys and namespaces recycled as needed.  However, the number of
    source and destination keys must be the same.  The order of
    operation is not defined, so if the sets of keys are overlapping
    it is undefined behaviour.
  params:
    key_src: The source key (or vector of keys)
    key_dest: The destination key
    namespace: >-
      The namespace to copy keys within (used only of
      `namespace_src` and `namespace_dest` are not provided
    namespace_src: >-
      The source namespace - use this where keys are duplicated across
      namespaces.
    namespace_dest: >-
      The destination namespace - use this where keys are duplicated across
      namespaces.

fill:
  short: >-
    Set one or more keys (potentially across namespaces) to the same
    value, without duplication effort serialisation, or duplicating
    data.
  params:
    key: A vector of keys to get; zero to many valid keys
    namespace: A vector of namespaces (either a single namespace or a vector)
    value: A single value to set all keys to
    use_cache: *use_cache

clear:
  short: >-
    Clear a storr.  This function might be slow as it will iterate
    over each key.  Future versions of storr might allow drivers to
    implement a bulk clear method that will allow faster clearing.
  params:
    namespace: >-
      A namespace, to clear a single namespace, or `NULL` to
      clear all namespaces.
exists:
  short: Test if a key exists within a namespace
  params:
    key: *key_vector
    namespace: *ns
  value: >-
    A logical vector the same length as the recycled length of
    key/namespace, with each element being `TRUE` if the object
    exists and `FALSE` otherwise.
exists_object:
  short: Test if an object with a given hash exists within the storr
  params:
    hash: Hash to test

mset:
  short: Set multiple elements at once
  params:
    key: A vector of keys to set; zero to many valid keys
    value: A vector of values
    namespace: A vector of namespaces (either a single namespace or a vector)
    use_cache: *use_cache
  details: &recycling >-
    The arguments `key` and `namespace` are recycled such
    that either can be given as a scalar if the other is a vector.
    Other recycling is not allowed.

mget:
  short: Get multiple elements at once
  params:
    key: A vector of keys to get; zero to many valid keys
    namespace: A vector of namespaces (either a single namespace or a vector)
    use_cache: *use_cache
    missing: >-
      Value to use for missing elements; by default `NULL` will
      be used.  IF `NULL` is a value that you might have stored
      in the storr you might want to use a different value here to
      distinguish "missing" from "set to NULL".  In addition, the
      `missing` attribute will indicate which values were
      missing.
  details: *recycling
  value: >-
    A list with a length of the recycled length of `key` and
    `namespace`.  If any elements are missing, then an attribute
    `missing` will indicate the elements that are missing (this
    will be an integer vector with the indices of values were not
    found in the storr).

mset_by_value:
  short: >-
    Set multiple elements at once, by value.  A cross between
    `mset` and `set_by_value`.
  params:
    value: A list or vector of values to set into the storr.
    namespace: A vector of namespaces
    use_cache: *use_cache

gc:
  short: >-
    Garbage collect the storr.  Because keys do not directly map to
    objects, but instead map to hashes which map to objects, it is
    possible that hash/object pairs can persist with nothing pointing
    at them.  Running `gc` will remove these objects from the
    storr.
get_value:
  short: >-
    Get the content of an object given its hash.
  params:
    hash: The hash of the object to retrieve.
    use_cache: *use_cache
  value: The object if it is present, otherwise throw a `HashError`.
set_value:
  short: >-
    Add an object value, but don't add a key.  You will not need to
    use this very often, but it is used internally.
  params:
    value: An R object to set.
    use_cache: *use_cache
  value: Invisibly, the hash of the object.
mset_value:
  short: >-
    Add a vector of object values, but don't add keys.  You will not
    need to use this very often, but it is used internally.
  params:
    values: A list of R objects to set
    use_cache: *use_cache
list:
  short: >-
    List all keys stored in a namespace.
  params:
    namespace: The namespace to list keys within.
  value: &sorted_char A sorted character vector (possibly zero-length).
list_hashes:
  short: List all hashes stored in the storr
  value: *sorted_char
list_namespaces:
  short: List all namespaces known to the database
  value: *sorted_char

import:
  short: Import R objects from an environment.
  params:
    src: >-
      Object to import objects from; can be a list, environment or
      another storr.
    list: >-
      Names of of objects to import (or `NULL` to import all
      objects in `envir`.  If given it must be a character
      vector.  If named, the names of the character vector will be the
      names of the objects as created in the storr.
    namespace: >-
      Namespace to get objects from, and to put objects into.  If
      `NULL`, all namespaces from `src` will be imported.
      If named, then the same rule is followed as `list`;
      `namespace = c(a = b)` will import the contents of
      namespace `b` as namespace `a`.
    skip_missing: >-
      Logical, indicating if missing keys (specified in `list`)
      should be skipped over, rather than being treated as an error
      (the default).

export:
  short: Export objects from the storr into something else.
  params:
    dest: >-
      A target destination to export objects to; can be a list,
      environment, or another storr.  Use `list()` to export to a
      brand new list, or use `as.list(object)` for a shorthand.
    list: >-
      Names of objects to export, with the same rules as `list`
      in `$import`.
    namespace: >-
      Namespace to get objects from, and to put objects into.  If
      `NULL`, then this will export namespaces from this (source)
      storr into the destination; if there is more than one
      namespace,this is only possible if `dest` is a storr
      (otherwise there will be an error).
    skip_missing: >-
      Logical, indicating if missing keys (specified in `list`)
      should be skipped over, rather than being treated as an error
      (the default).
  value: >-
    Invisibly, `dest`, which allows use of `e <-
    st$export(new.env())` and `x <- st$export(list())`.

archive_export:
  short: >-
    Export objects from the storr into a special "archive" storr,
    which is an [storr_rds] with name mangling turned on
    (which encodes keys with base64 so that they do not violate
    filesystem naming conventions).
  params:
    path: Path to create the storr at; can exist already.
    names: As for `$export`
    namespace: >-
      Namespace to get objects from.  If `NULL`, then exports all
      namespaces found in this (source) storr.

archive_import:
  short: >-
    Inverse of `archive_export`; import objects from a storr that
    was created by `archive_export`.
  params:
    path: Path of the exported storr.
    names: As for `$import`
    namespace: >-
      Namespace to import objects into.  If `NULL`, then imports
      all namespaces from the source storr.

index_export:
  short: >-
    Generate a data.frame with an index of objects present in a storr.
    This can be saved (for an rds storr) in lieu of the keys/
    directory and re-imported with `index_import`.  It will
    provide a more version control friendly export of the data in a
    storr.
  params:
    namespace: >-
      Optional character vector of namespaces to export.  The default
      is to export all namespaces.

index_import:
  short: >-
    Import an index.
  params:
    index: >-
      Must be a data.frame with columns 'namespace', 'key' and 'hash'
      (in any order).  It is an error if not all hashes are present in
      the storr.
